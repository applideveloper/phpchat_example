// Generated by CoffeeScript 1.6.2
(function() {
  var config, cookie, http, io, pubsub, querystring, redis, sockets,
    _this = this;

  config = require('config');

  http = require('http');

  io = require('socket.io').listen(3000);

  cookie = require('cookie');

  querystring = require('querystring');

  redis = require('redis');

  sockets = {};

  pubsub = redis.createClient();

  pubsub.subscribe('chat');

  pubsub.on('message', function(channel, message) {
    var socket, user_id, _results;

    _results = [];
    for (user_id in sockets) {
      socket = sockets[user_id];
      _results.push(socket.emit('message', JSON.parse(message)));
    }
    return _results;
  });

  io.sockets.on('connection', function(socket) {
    var api_response, cookie_object, req, request_cookie, session_cookie, _ref, _ref1,
      _this = this;

    if ((socket != null ? (_ref = socket.handshake) != null ? (_ref1 = _ref.headers) != null ? _ref1.cookie : void 0 : void 0 : void 0) == null) {
      return false;
    }
    session_cookie = cookie.parse(socket.handshake.headers.cookie)[config.APP.cookie.session_key];
    cookie_object = {};
    cookie_object[config.APP.cookie.session_key] = session_cookie;
    request_cookie = querystring.stringify(cookie_object);
    api_response = '';
    req = http.request({
      host: config.APP.api.host,
      port: config.APP.api.port,
      path: config.APP.api.path,
      method: 'get',
      headers: {
        'Cookie': request_cookie
      }
    }, function(res) {
      res.setEncoding('utf-8');
      res.on('data', function(chunk) {
        return api_response += chunk;
      });
      return res.on('end', function() {
        var error, json;

        try {
          json = JSON.parse(api_response);
        } catch (_error) {
          error = _error;
          console.log('PHP RESPONSE JSON PARSE ERROR : ', error);
        }
        if ((json != null ? json.user_id : void 0) != null) {
          return sockets[json.user_id] = socket;
        }
      });
    });
    return req.end();
  });

}).call(this);
