// Generated by CoffeeScript 1.6.2
(function() {
  var ChatView, MessageModel, MessageView, MessagesCollection, socket, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  _.mixin(_.str.exports());

  socket = io.connect("http://" + location.host + ":3000/");

  MessageModel = (function(_super) {
    __extends(MessageModel, _super);

    function MessageModel() {
      _ref = MessageModel.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MessageModel.prototype.urlRoot = '/api/message';

    MessageModel.prototype.defaults = {
      id: null,
      user_id: '',
      message: '',
      top: false,
      created_at: null,
      updated_at: null
    };

    return MessageModel;

  })(Backbone.Model);

  MessagesCollection = (function(_super) {
    __extends(MessagesCollection, _super);

    function MessagesCollection() {
      this.url = __bind(this.url, this);      _ref1 = MessagesCollection.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    MessagesCollection.prototype.url = function() {
      return "/api/messages/" + this.length;
    };

    MessagesCollection.prototype.model = MessageModel;

    return MessagesCollection;

  })(Backbone.Collection);

  MessageView = (function(_super) {
    __extends(MessageView, _super);

    function MessageView() {
      this.render = __bind(this.render, this);
      this.initialize = __bind(this.initialize, this);      _ref2 = MessageView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    MessageView.prototype.el = '<div class="row"></div>';

    MessageView.prototype.model = null;

    MessageView.prototype.template = _.template('<div class="col-2"><%= model.get(\'user_id\') %></div>\n<div class="col-10"><p><%= model.get(\'message\') %></p></div>');

    MessageView.prototype.initialize = function() {
      return this.render();
    };

    MessageView.prototype.render = function() {
      return this.$el.html(this.template({
        model: this.model
      }));
    };

    return MessageView;

  })(Backbone.View);

  ChatView = (function(_super) {
    __extends(ChatView, _super);

    function ChatView() {
      this.recievedMessage = __bind(this.recievedMessage, this);
      this.sendMessage = __bind(this.sendMessage, this);
      this.getNewMessageModel = __bind(this.getNewMessageModel, this);
      this.clearInputMessage = __bind(this.clearInputMessage, this);
      this.getInputMessage = __bind(this.getInputMessage, this);
      this.renderMessage = __bind(this.renderMessage, this);
      this.fetchMessages = __bind(this.fetchMessages, this);
      this.initialize = __bind(this.initialize, this);      _ref3 = ChatView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    ChatView.prototype.el = '#main';

    ChatView.prototype.events = {
      'submit #form': 'sendMessage'
    };

    ChatView.prototype.collection = null;

    ChatView.prototype.$container = null;

    ChatView.prototype.$form = null;

    ChatView.prototype.$input = null;

    ChatView.prototype.initialize = function() {
      this.$container = $('#container');
      this.$form = $('#form');
      this.$input = this.$form.find('input');
      this.collection = new MessagesCollection();
      this.collection.on('add', this.renderMessage);
      this.fetchMessages();
      return socket.on('message', this.recievedMessage);
    };

    ChatView.prototype.fetchMessages = function() {
      return this.collection.fetch({
        update: true,
        add: true,
        remove: false
      });
    };

    ChatView.prototype.renderMessage = function(messageModel) {
      var messageView, method;

      messageView = new MessageView({
        model: messageModel
      });
      method = messageModel.get('top') ? 'prepend' : 'append';
      return this.$container[method](messageView.$el);
    };

    ChatView.prototype.getInputMessage = function() {
      return this.$input.val();
    };

    ChatView.prototype.clearInputMessage = function() {
      this.$input.val('');
      return this;
    };

    ChatView.prototype.getNewMessageModel = function(message, id, user_id, top) {
      if (id == null) {
        id = null;
      }
      if (user_id == null) {
        user_id = null;
      }
      if (top == null) {
        top = false;
      }
      return new MessageModel({
        id: id,
        message: message,
        user_id: user_id,
        top: top
      });
    };

    ChatView.prototype.sendMessage = function() {
      var message, model,
        _this = this;

      message = _.trim(this.getInputMessage());
      if (message.length === 0) {
        return false;
      }
      model = this.getNewMessageModel(message, null, null, true);
      this.clearInputMessage();
      model.save({}, {
        success: function() {
          return _this.collection.set(model);
        }
      });
      return false;
    };

    ChatView.prototype.recievedMessage = function(messageData) {
      return this.collection.set(this.getNewMessageModel(messageData.message, messageData.id, messageData.user_id, true));
    };

    return ChatView;

  })(Backbone.View);

  $(function() {
    return new ChatView();
  });

}).call(this);
